@page "/progress"
@using System.Text.Json
@using IntervalRecall.UI.Services
@inject StateContainer StateContainer

<div class="container mt-3">
    @if (StateContainer.QuestionResponseInfo == null)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
            </div>
        </div>
    }
    else
    {
        <table class="table">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Question</th>
                    <th scope="col">Decision Quality</th>
                    <th scope="col">Amount correct/incorrect</th>
                    <th scope="col">Repetitions</th>
                    <th scope="col">Next Repetition Date</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var questionResponce in StateContainer.QuestionResponseInfo)
                {
                    <tr>
                        <th scope="row">@i</th>
                        <td scope="row">@questionResponce.Text</td>
                        <td scope="row">@questionResponce.DecisionQualities.Last().Value</td>
                        <td scope="row">@CountCorrectAnswers(questionResponce.DecisionQualities.ToList())/@CountIncorrectAnswers(questionResponce.DecisionQualities.ToList())</td>
                        <td scope="row">@questionResponce.Repetitions</td>
                        <td scope="row">@questionResponce.RepetitionDate</td>
                    </tr>
                    i++;
                }
            </tbody>
        </table>
    }
</div>

@code {
    private int i = 1;

    private int CountCorrectAnswers(List<DecisionQualityDTO> decisionQualityDTOs)
    {
        return decisionQualityDTOs.Count(q => q.Value == true);
    }
    private int CountIncorrectAnswers(List<DecisionQualityDTO> decisionQualityDTOs)
    {
        return decisionQualityDTOs.Count(q => q.Value != true);
    }
}